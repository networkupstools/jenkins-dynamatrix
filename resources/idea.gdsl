// Downloaded from https://ci.networkupstools.org/pipeline-syntax/gdsl
// Last updated: 2023-05-23 vs. Jenkins 2.387.1 (and plugins we use).
// When updating, do not forget to indent braced scope blocks below,
// and fix escaped slashes "\/" (like in SSH step help) into simple
// slashes, if applicable: otherwise IDEA GDSL parser is confused.

//The global script scope
def ctx = context(scope: scriptScope())

// Local addons, not (yet?) generated by Jenkins; see
// https://gist.github.com/arehmandev/736daba40a3e1ef1fbe939c6674d7da8
// https://github.com/jaydubb12/jenkins-dsl-pipelines
contributor(ctx) {
    method(name: 'pipeline', type: 'Object', params: [body:'Closure'], doc: 'Pipeline root element')
    method(name: 'usernamePassword', type: 'Object', params: [stages: Map], doc: 'username plus password credential type')
    method(name: 'usernamePassword', type: 'Object', namedParams: [parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'passwordVariable', type: 'java.lang.String'), parameter(name: 'usernameVariable', type: 'java.lang.String'),], doc: 'username plus password credential type')
}

// Content below was copy-pasted and just cosmetically adapted from
// Jenkins server output:
/////////////////////////////////////////////////////////////////////////

//The global script scope
//def ctx = context(scope: scriptScope())
contributor(ctx) {
    method(name: 'parallel', type: 'Object', params: ['closures':'java.util.Map'], doc: 'Execute in parallel')
    method(name: 'parallel', type: 'Object', namedParams: [parameter(name: 'closures', type: 'java.util.Map'), parameter(name: 'failFast', type: 'boolean'), ], doc: 'Execute in parallel')
    method(name: 'addBadge', type: 'Object', namedParams: [parameter(name: 'icon', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Badge')
    method(name: 'addEmbeddableBadgeConfiguration', type: 'Object', params: [id:'java.lang.String'], doc: 'Add an Embeddable Badge Configuration')
    method(name: 'addEmbeddableBadgeConfiguration', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'animatedOverlayColor', type: 'java.lang.String'), parameter(name: 'color', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), parameter(name: 'status', type: 'java.lang.String'), parameter(name: 'subject', type: 'java.lang.String'), ], doc: 'Add an Embeddable Badge Configuration')
    method(name: 'addErrorBadge', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Error Badge')
    method(name: 'addErrorBadge', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Error Badge')
    method(name: 'addHtmlBadge', type: 'Object', params: [html:'java.lang.String'], doc: 'Add a html badge Text')
    method(name: 'addHtmlBadge', type: 'Object', namedParams: [parameter(name: 'html', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Add a html badge Text')
    method(name: 'addInfoBadge', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Info Badge')
    method(name: 'addInfoBadge', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Info Badge')
    method(name: 'addShortText', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Short Text')
    method(name: 'addShortText', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'background', type: 'java.lang.String'), parameter(name: 'border', type: 'java.lang.Integer'), parameter(name: 'borderColor', type: 'java.lang.String'), parameter(name: 'color', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Short Text')
    method(name: 'addWarningBadge', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Warning Badge')
    method(name: 'addWarningBadge', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Warning Badge')
    method(name: 'ansiColor', type: 'Object', params: [colorMapName:java.lang.String, body:'Closure'], doc: 'Color ANSI Console Output')
    method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')
    method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'java.util.List'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'), parameter(name: 'waitForStart', type: 'boolean'), ], doc: 'Build a job')
    method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Catch error and set build result to failure')
    method(name: 'catchError', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'buildResult', type: 'java.lang.String'), parameter(name: 'catchInterruptions', type: 'boolean'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'stageResult', type: 'java.lang.String'), ], doc: 'Catch error and set build result to failure')
    method(name: 'compareVersions', type: 'Object', namedParams: [parameter(name: 'v1', type: 'java.lang.String'), parameter(name: 'v2', type: 'java.lang.String'), parameter(name: 'failIfEmpty', type: 'boolean'), ], doc: 'Compare two version number strings')
    method(name: 'createSummary', type: 'Object', params: [icon:'java.lang.String'], doc: 'Print Message')
    method(name: 'createSummary', type: 'Object', namedParams: [parameter(name: 'icon', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Print Message')
    method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Print Message')
    method(name: 'emailext', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'attachLog', type: 'boolean'), parameter(name: 'attachmentsPattern', type: 'java.lang.String'), parameter(name: 'compressLog', type: 'boolean'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'postsendScript', type: 'java.lang.String'), parameter(name: 'presendScript', type: 'java.lang.String'), parameter(name: 'recipientProviders', type: 'java.util.List'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'saveOutput', type: 'boolean'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Extended Email')
    method(name: 'emailextrecipients', type: 'Object', params: [recipientProviders:'java.util.List'], doc: 'Extended Email Recipients')
    method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')
    method(name: 'findBuildScans', type: 'Object', params: [:], doc: 'Find published build scans')
    method(name: 'gitStatusWrapper', type: 'Object', params: [body:'Closure'], doc: 'gitStatusWrapper')
    method(name: 'gitStatusWrapper', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'account', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'failureDescription', type: 'java.lang.String'), parameter(name: 'gitApiUrl', type: 'java.lang.String'), parameter(name: 'gitHubContext', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), parameter(name: 'sha', type: 'java.lang.String'), parameter(name: 'successDescription', type: 'java.lang.String'), parameter(name: 'targetUrl', type: 'java.lang.String'), ], doc: 'gitStatusWrapper')
    method(name: 'githubNotify', type: 'Object', namedParams: [parameter(name: 'status', type: 'Map'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'account', type: 'java.lang.String'), parameter(name: 'context', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'gitApiUrl', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), parameter(name: 'sha', type: 'java.lang.String'), parameter(name: 'targetUrl', type: 'java.lang.String'), ], doc: 'Notifies GitHub of the status of a Pull Request')
    method(name: 'httpRequest', type: 'Object', params: [url:'java.lang.String'], doc: 'Perform an HTTP Request and return a response object')
    method(name: 'httpRequest', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'acceptType', type: 'Map'), parameter(name: 'authentication', type: 'java.lang.String'), parameter(name: 'consoleLogResponseBody', type: 'java.lang.Boolean'), parameter(name: 'contentType', type: 'Map'), parameter(name: 'customHeaders', type: 'java.util.List'), parameter(name: 'formData', type: 'java.util.List'), parameter(name: 'httpMode', type: 'Map'), parameter(name: 'httpProxy', type: 'java.lang.String'), parameter(name: 'ignoreSslErrors', type: 'boolean'), parameter(name: 'multipartName', type: 'java.lang.String'), parameter(name: 'outputFile', type: 'java.lang.String'), parameter(name: 'proxyAuthentication', type: 'java.lang.String'), parameter(name: 'quiet', type: 'java.lang.Boolean'), parameter(name: 'requestBody', type: 'java.lang.String'), parameter(name: 'responseHandle', type: 'Map'), parameter(name: 'timeout', type: 'java.lang.Integer'), parameter(name: 'uploadFile', type: 'java.lang.String'), parameter(name: 'useNtlm', type: 'boolean'), parameter(name: 'useSystemProperties', type: 'java.lang.Boolean'), parameter(name: 'validResponseCodes', type: 'java.lang.String'), parameter(name: 'validResponseContent', type: 'java.lang.String'), parameter(name: 'wrapAsMultipart', type: 'boolean'), ], doc: 'Perform an HTTP Request and return a response object')
    method(name: 'input', type: 'Object', params: [message:'java.lang.String'], doc: 'Wait for interactive input')
    method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'java.util.List'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'), ], doc: 'Wait for interactive input')
    method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
    method(name: 'library', type: 'Object', params: [identifier:'java.lang.String'], doc: 'Load a library on the fly')
    method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: 'Map'), ], doc: 'Load a library on the fly')
    method(name: 'libraryResource', type: 'Object', params: [resource:'java.lang.String'], doc: 'Load a resource file from a library')
    method(name: 'libraryResource', type: 'Object', namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Load a resource file from a library')
    method(name: 'lock', type: 'Object', params: [resource:java.lang.String, body:'Closure'], doc: 'Lock shared resource')
    method(name: 'lock', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'extra', type: 'java.util.List'), parameter(name: 'inversePrecedence', type: 'boolean'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'quantity', type: 'int'), parameter(name: 'resourceSelectStrategy', type: 'java.lang.String'), parameter(name: 'skipIfLocked', type: 'boolean'), parameter(name: 'variable', type: 'java.lang.String'), ], doc: 'Lock shared resource')
    method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Mail')
    method(name: 'milestone', type: 'Object', params: [ordinal:'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'unsafe', type: 'boolean'), ], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'node', type: 'Object', params: [label:java.lang.String, body:'Closure'], doc: 'Allocate node')
    method(name: 'nodesByLabel', type: 'Object', params: [label:'java.lang.String'], doc: 'List of nodes by Label, by default excludes offline nodes.')
    method(name: 'nodesByLabel', type: 'Object', namedParams: [parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'offline', type: 'boolean'), ], doc: 'List of nodes by Label, by default excludes offline nodes.')
    method(name: 'properties', type: 'Object', params: [properties:'java.util.List'], doc: 'Set job properties')
    method(name: 'publishChecks', type: 'Object', params: [:], doc: 'Publish customized checks to SCM platforms')
    method(name: 'publishChecks', type: 'Object', namedParams: [parameter(name: 'actions', type: 'java.util.List'), parameter(name: 'annotations', type: 'java.util.List'), parameter(name: 'conclusion', type: 'Map'), parameter(name: 'detailsURL', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'status', type: 'Map'), parameter(name: 'summary', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'title', type: 'java.lang.String'), ], doc: 'Publish customized checks to SCM platforms')
    method(name: 'publishIssues', type: 'Object', params: [issues:'java.util.List'], doc: 'Publish issues created by a static analysis scan')
    method(name: 'publishIssues', type: 'Object', namedParams: [parameter(name: 'issues', type: 'java.util.List'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'failedNewAll', type: 'int'), parameter(name: 'failedNewHigh', type: 'int'), parameter(name: 'failedNewLow', type: 'int'), parameter(name: 'failedNewNormal', type: 'int'), parameter(name: 'failedTotalAll', type: 'int'), parameter(name: 'failedTotalHigh', type: 'int'), parameter(name: 'failedTotalLow', type: 'int'), parameter(name: 'failedTotalNormal', type: 'int'), parameter(name: 'healthy', type: 'int'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ignoreFailedBuilds', type: 'boolean'), parameter(name: 'ignoreQualityGate', type: 'boolean'), parameter(name: 'minimumSeverity', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'publishAllIssues', type: 'boolean'), parameter(name: 'qualityGates', type: 'java.util.List'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'referenceBuildId', type: 'java.lang.String'), parameter(name: 'referenceJobName', type: 'java.lang.String'), parameter(name: 'skipPublishingChecks', type: 'boolean'), parameter(name: 'sourceCodeEncoding', type: 'java.lang.String'), parameter(name: 'trendChartType', type: 'Map'), parameter(name: 'unhealthy', type: 'int'), parameter(name: 'unstableNewAll', type: 'int'), parameter(name: 'unstableNewHigh', type: 'int'), parameter(name: 'unstableNewLow', type: 'int'), parameter(name: 'unstableNewNormal', type: 'int'), parameter(name: 'unstableTotalAll', type: 'int'), parameter(name: 'unstableTotalHigh', type: 'int'), parameter(name: 'unstableTotalLow', type: 'int'), parameter(name: 'unstableTotalNormal', type: 'int'), ], doc: 'Publish issues created by a static analysis scan')
    method(name: 'readCSV', type: 'Object', params: [:], doc: 'Read content from a CSV file in the workspace.')
    method(name: 'readCSV', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'format', type: 'Map'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read content from a CSV file in the workspace.')
    method(name: 'readJSON', type: 'Object', params: [:], doc: 'Read JSON from files in the workspace.')
    method(name: 'readJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'returnPojo', type: 'boolean'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read JSON from files in the workspace.')
    method(name: 'readManifest', type: 'Object', params: [:], doc: 'Read a Jar Manifest')
    method(name: 'readManifest', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read a Jar Manifest')
    method(name: 'readProperties', type: 'Object', params: [:], doc: 'Read properties from files in the workspace or text.')
    method(name: 'readProperties', type: 'Object', namedParams: [parameter(name: 'defaults', type: 'java.util.Map'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'interpolate', type: 'java.lang.Boolean'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read properties from files in the workspace or text.')
    method(name: 'readTrusted', type: 'Object', params: [path:'java.lang.String'], doc: 'Read trusted file from SCM')
    method(name: 'readYaml', type: 'Object', params: [:], doc: 'Read yaml from files in the workspace or text.')
    method(name: 'readYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'maxAliasesForCollections', type: 'int'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read yaml from files in the workspace or text.')
    method(name: 'removeBadges', type: 'Object', params: [:], doc: 'Remove Badges')
    method(name: 'removeBadges', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Remove Badges')
    method(name: 'removeHtmlBadges', type: 'Object', params: [:], doc: 'Remove Html Badges')
    method(name: 'removeHtmlBadges', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Remove Html Badges')
    method(name: 'removeSummaries', type: 'Object', params: [:], doc: 'Remove Summaries')
    method(name: 'removeSummaries', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Remove Summaries')
    method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'java.util.List'), parameter(name: 'ignoreErrors', type: 'boolean'), ], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
    method(name: 'retry', type: 'Object', params: [count:int, body:'Closure'], doc: 'Retry the body up to N times')
    method(name: 'retry', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'count', type: 'int'), parameter(name: 'conditions', type: 'java.util.List'), ], doc: 'Retry the body up to N times')
    method(name: 'script', type: 'Object', params: [body:'Closure'], doc: 'Run arbitrary Pipeline script')
    method(name: 'setGitHubPullRequestStatus', type: 'Object', params: [:], doc: 'Set GitHub PullRequest Commit Status')
    method(name: 'setGitHubPullRequestStatus', type: 'Object', namedParams: [parameter(name: 'context', type: 'java.lang.String'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'state', type: 'Map'), ], doc: 'Set GitHub PullRequest Commit Status')
    method(name: 'sleep', type: 'Object', params: [time:'int'], doc: 'Sleep')
    method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Sleep')
    method(name: 'stage', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Stage')
    method(name: 'stage', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'), ], doc: 'Stage')
    method(name: 'step', type: 'Object', params: [delegate:'Map'], doc: 'General Build Step')
    method(name: 'throttle', type: 'Object', params: [categories:java.util.List, body:'Closure'], doc: 'Throttle execution of node blocks within this body')
    method(name: 'timeout', type: 'Object', params: [time:int, body:'Closure'], doc: 'Enforce time limit')
    method(name: 'timeout', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'activity', type: 'boolean'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Enforce time limit')
    method(name: 'timestamps', type: 'Object', params: [body:'Closure'], doc: 'Timestamps')
    method(name: 'tool', type: 'Object', params: [name:'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'), ], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'unstable', type: 'Object', params: [message:'java.lang.String'], doc: 'Set stage result to unstable')
    method(name: 'waitForBuild', type: 'Object', params: [runId:'java.lang.String'], doc: 'Wait for build to complete')
    method(name: 'waitForBuild', type: 'Object', namedParams: [parameter(name: 'runId', type: 'java.lang.String'), parameter(name: 'propagate', type: 'boolean'), ], doc: 'Wait for build to complete')
    method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], doc: 'Wait for condition')
    method(name: 'waitUntil', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'initialRecurrencePeriod', type: 'long'), parameter(name: 'quiet', type: 'boolean'), ], doc: 'Wait for condition')
    method(name: 'warnError', type: 'Object', params: [message:java.lang.String, body:'Closure'], doc: 'Catch error and set build and stage result to unstable')
    method(name: 'warnError', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'catchInterruptions', type: 'boolean'), ], doc: 'Catch error and set build and stage result to unstable')
    method(name: 'withChecks', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Inject checks properties into its closure')
    method(name: 'withCredentials', type: 'Object', params: [bindings:java.util.List, body:'Closure'], doc: 'Bind credentials to variables')
    method(name: 'withEnv', type: 'Object', params: [overrides:java.util.List, body:'Closure'], doc: 'Set environment variables')
    method(name: 'wrap', type: 'Object', params: [delegate:Map, body:'Closure'], doc: 'General Build Wrapper')
    method(name: 'writeJSON', type: 'Object', params: [json:'java.lang.Object'], doc: 'Write JSON to a file in the workspace.')
    method(name: 'writeJSON', type: 'Object', namedParams: [parameter(name: 'json', type: 'java.lang.Object'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'pretty', type: 'int'), parameter(name: 'returnText', type: 'boolean'), ], doc: 'Write JSON to a file in the workspace.')
    method(name: 'writeYaml', type: 'Object', params: [:], doc: 'Write a yaml from an object or objects.')
    method(name: 'writeYaml', type: 'Object', namedParams: [parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'data', type: 'java.lang.Object'), parameter(name: 'datas', type: 'java.util.Collection'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'overwrite', type: 'boolean'), parameter(name: 'returnText', type: 'boolean'), ], doc: 'Write a yaml from an object or objects.')
    method(name: 'ws', type: 'Object', params: [dir:java.lang.String, body:'Closure'], doc: 'Allocate workspace')
    method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
    method(name: 'getContext', type: 'Object', params: [type:'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
    method(name: 'withContext', type: 'Object', params: [context:java.lang.Object, body:'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')
    property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')
    property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
    property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
    property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
    property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
    property(name: 'manager', type: 'org.jvnet.hudson.plugins.groovypostbuild.WorkflowManager')
}
//Steps that require a node context
def nodeCtx = context(scope: closureScope())
contributor(nodeCtx) {
    def call = enclosingCall('node')
    if (call) {
        method(name: 'bat', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows Batch Script')
        method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Windows Batch Script')
        method(name: 'checkout', type: 'Object', params: [scm:'Map'], doc: 'Check out from version control')
        method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: 'Map'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Check out from version control')
        method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
        method(name: 'dir', type: 'Object', params: [path:java.lang.String, body:'Closure'], doc: 'Change current directory')
        method(name: 'fileExists', type: 'Object', params: [file:'java.lang.String'], doc: 'Verify if file exists in workspace')
        method(name: 'findFiles', type: 'Object', params: [:], doc: 'Find files in the workspace')
        method(name: 'findFiles', type: 'Object', namedParams: [parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Find files in the workspace')
        method(name: 'git', type: 'Object', params: [url:'java.lang.String'], doc: 'Git')
        method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Git')
        method(name: 'ircNotify', type: 'Object', params: [:], doc: 'IRC Notification')
        method(name: 'ircNotify', type: 'Object', namedParams: [parameter(name: 'buildToChatNotifier', type: 'Map'), parameter(name: 'customMessage', type: 'java.lang.String'), parameter(name: 'extraMessage', type: 'java.lang.String'), parameter(name: 'matrixNotifier', type: 'Map'), parameter(name: 'notificationStrategy', type: 'java.lang.String'), parameter(name: 'notifyCulprits', type: 'boolean'), parameter(name: 'notifyFixers', type: 'boolean'), parameter(name: 'notifyOnStart', type: 'boolean'), parameter(name: 'notifySuspects', type: 'boolean'), parameter(name: 'notifyUpstreamCommitters', type: 'boolean'), parameter(name: 'targets', type: 'java.lang.String'), ], doc: 'IRC Notification')
        method(name: 'junit', type: 'Object', params: [testResults:'java.lang.String'], doc: 'Archive JUnit-formatted test results')
        method(name: 'junit', type: 'Object', namedParams: [parameter(name: 'testResults', type: 'java.lang.String'), parameter(name: 'allowEmptyResults', type: 'boolean'), parameter(name: 'checksName', type: 'java.lang.String'), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: 'boolean'), parameter(name: 'skipMarkingBuildUnstable', type: 'boolean'), parameter(name: 'skipOldReports', type: 'boolean'), parameter(name: 'skipPublishingChecks', type: 'boolean'), parameter(name: 'testDataPublishers', type: 'java.util.List'), ], doc: 'Archive JUnit-formatted test results')
        method(name: 'load', type: 'Object', params: [path:'java.lang.String'], doc: 'Evaluate a Groovy source file into the Pipeline script')
        method(name: 'powershell', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows PowerShell Script')
        method(name: 'powershell', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Windows PowerShell Script')
        method(name: 'prependToFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'content', type: 'java.lang.String'), ], doc: 'Create a file (if not already exist) in the workspace, and prepend given content to that file.')
        method(name: 'publishHTML', type: 'Object', params: [target:'Map'], doc: 'Publish HTML reports')
        method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')
        method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: 'boolean'), ], doc: 'Determine current directory')
        method(name: 'pwsh', type: 'Object', params: [script:'java.lang.String'], doc: 'PowerShell Core Script')
        method(name: 'pwsh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'PowerShell Core Script')
        method(name: 'readFile', type: 'Object', params: [file:'java.lang.String'], doc: 'Read file from workspace')
        method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Read file from workspace')
        method(name: 'readMavenPom', type: 'Object', params: [:], doc: 'Read a maven project file.')
        method(name: 'readMavenPom', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Read a maven project file.')
        method(name: 'recordCoverage', type: 'Object', params: [:], doc: 'Record code coverage results')
        method(name: 'recordCoverage', type: 'Object', namedParams: [parameter(name: 'checksAnnotationScope', type: 'Map'), parameter(name: 'checksName', type: 'java.lang.String'), parameter(name: 'enabledForFailure', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'qualityGates', type: 'java.util.List'), parameter(name: 'scm', type: 'java.lang.String'), parameter(name: 'skipPublishingChecks', type: 'boolean'), parameter(name: 'skipSymbolicLinks', type: 'boolean'), parameter(name: 'sourceCodeEncoding', type: 'java.lang.String'), parameter(name: 'sourceCodeRetention', type: 'Map'), parameter(name: 'sourceDirectories', type: 'java.util.List'), parameter(name: 'tools', type: 'java.util.List'), ], doc: 'Record code coverage results')
        method(name: 'recordIssues', type: 'Object', params: [:], doc: 'Record compiler warnings and static analysis results')
        method(name: 'recordIssues', type: 'Object', namedParams: [parameter(name: 'aggregatingResults', type: 'boolean'), parameter(name: 'blameDisabled', type: 'boolean'), parameter(name: 'enabledForFailure', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'failedNewAll', type: 'int'), parameter(name: 'failedNewHigh', type: 'int'), parameter(name: 'failedNewLow', type: 'int'), parameter(name: 'failedNewNormal', type: 'int'), parameter(name: 'failedTotalAll', type: 'int'), parameter(name: 'failedTotalHigh', type: 'int'), parameter(name: 'failedTotalLow', type: 'int'), parameter(name: 'failedTotalNormal', type: 'int'), parameter(name: 'filters', type: 'java.util.List'), parameter(name: 'forensicsDisabled', type: 'boolean'), parameter(name: 'healthy', type: 'int'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ignoreFailedBuilds', type: 'boolean'), parameter(name: 'ignoreQualityGate', type: 'boolean'), parameter(name: 'minimumSeverity', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'publishAllIssues', type: 'boolean'), parameter(name: 'qualityGates', type: 'java.util.List'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'referenceBuildId', type: 'java.lang.String'), parameter(name: 'referenceJobName', type: 'java.lang.String'), parameter(name: 'scm', type: 'java.lang.String'), parameter(name: 'skipBlames', type: 'boolean'), parameter(name: 'skipPublishingChecks', type: 'boolean'), parameter(name: 'sourceCodeEncoding', type: 'java.lang.String'), parameter(name: 'sourceDirectories', type: 'java.util.List'), parameter(name: 'sourceDirectory', type: 'java.lang.String'), parameter(name: 'tool', type: 'Map'), parameter(name: 'toolProxies', type: 'java.util.List'), parameter(name: 'tools', type: 'java.util.List'), parameter(name: 'trendChartType', type: 'Map'), parameter(name: 'unhealthy', type: 'int'), parameter(name: 'unstableNewAll', type: 'int'), parameter(name: 'unstableNewHigh', type: 'int'), parameter(name: 'unstableNewLow', type: 'int'), parameter(name: 'unstableNewNormal', type: 'int'), parameter(name: 'unstableTotalAll', type: 'int'), parameter(name: 'unstableTotalHigh', type: 'int'), parameter(name: 'unstableTotalLow', type: 'int'), parameter(name: 'unstableTotalNormal', type: 'int'), ], doc: 'Record compiler warnings and static analysis results')
        method(name: 'scanForIssues', type: 'Object', params: [:], doc: 'Scan files or the console log for warnings or issues')
        method(name: 'scanForIssues', type: 'Object', namedParams: [parameter(name: 'blameDisabled', type: 'boolean'), parameter(name: 'filters', type: 'java.util.List'), parameter(name: 'forensicsDisabled', type: 'boolean'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'scm', type: 'java.lang.String'), parameter(name: 'sourceCodeEncoding', type: 'java.lang.String'), parameter(name: 'sourceDirectories', type: 'java.util.List'), parameter(name: 'sourceDirectory', type: 'java.lang.String'), parameter(name: 'tool', type: 'Map'), ], doc: 'Scan files or the console log for warnings or issues')
        method(name: 'sh', type: 'Object', params: [script:'java.lang.String'], doc: 'Shell Script')
        method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Shell Script')
        method(name: 'sha1', type: 'Object', params: [file:'java.lang.String'], doc: 'Compute the SHA1 of a given file')
        method(name: 'sha256', type: 'Object', params: [file:'java.lang.String'], doc: 'Compute the SHA256 of a given file')
        method(name: 'sshagent', type: 'Object', params: [credentials:java.util.List, body:'Closure'], doc: 'SSH Agent')
        method(name: 'sshagent', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: 'java.util.List'), parameter(name: 'ignoreMissing', type: 'boolean'), ], doc: 'SSH Agent')
        method(name: 'stash', type: 'Object', params: [name:'java.lang.String'], doc: 'Stash some files to be used later in the build')
        method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'allowEmpty', type: 'boolean'), parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'useDefaultExcludes', type: 'boolean'), ], doc: 'Stash some files to be used later in the build')
        method(name: 'tar', type: 'Object', params: [:], doc: 'Create Tar file')
        method(name: 'tar', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'archive', type: 'boolean'), parameter(name: 'compress', type: 'boolean'), parameter(name: 'defaultExcludes', type: 'boolean'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'exclude', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'overwrite', type: 'boolean'), ], doc: 'Create Tar file')
        method(name: 'tee', type: 'Object', params: [file:java.lang.String, body:'Closure'], doc: 'Tee output to file')
        method(name: 'tm', type: 'Object', params: [stringWithMacro:'java.lang.String'], doc: 'Expand a string containing macros')
        method(name: 'touch', type: 'Object', params: [file:'java.lang.String'], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
        method(name: 'touch', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'timestamp', type: 'java.lang.Long'), ], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
        method(name: 'unstash', type: 'Object', params: [name:'java.lang.String'], doc: 'Restore files previously stashed')
        method(name: 'untar', type: 'Object', params: [:], doc: 'Extract Tar file')
        method(name: 'untar', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'keepPermissions', type: 'boolean'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'test', type: 'boolean'), ], doc: 'Extract Tar file')
        method(name: 'unzip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Extract Zip file')
        method(name: 'unzip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'read', type: 'boolean'), parameter(name: 'test', type: 'boolean'), ], doc: 'Extract Zip file')
        method(name: 'validateDeclarativePipeline', type: 'Object', params: [path:'java.lang.String'], doc: 'Validate a file containing a Declarative Pipeline')
        method(name: 'verifySha1', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'hash', type: 'java.lang.String'), ], doc: 'Verify the SHA1 of a given file')
        method(name: 'verifySha256', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'hash', type: 'java.lang.String'), ], doc: 'Verify the SHA256 of a given file')
        method(name: 'withGradle', type: 'Object', params: [body:'Closure'], doc: 'WithGradle')
        method(name: 'writeCSV', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'records', type: 'java.lang.Iterable'), parameter(name: 'format', type: 'Map'), ], doc: 'Write content to a CSV file in the workspace.')
        method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Write file to workspace')
        method(name: 'writeMavenPom', type: 'Object', params: [model:'Map'], doc: 'Write a maven project file.')
        method(name: 'writeMavenPom', type: 'Object', namedParams: [parameter(name: 'model', type: 'Map'), parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Write a maven project file.')
        method(name: 'zip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Create Zip file')
        method(name: 'zip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'archive', type: 'boolean'), parameter(name: 'defaultExcludes', type: 'boolean'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'exclude', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'overwrite', type: 'boolean'), ], doc: 'Create Zip file')
        method(name: 'archive', type: 'Object', params: [includes:'java.lang.String'], doc: 'Advanced/Deprecated Archive artifacts')
        method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'), ], doc: 'Archive artifacts')
        method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
        method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: 'java.util.Map'), ], doc: 'Copy archived artifacts into the workspace')
    }
}

// Errors on:
